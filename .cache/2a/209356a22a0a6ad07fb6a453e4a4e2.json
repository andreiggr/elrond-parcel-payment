{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js.map","includedInParent":true,"mtime":1647170304864},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"fs","loc":{"line":35,"column":32,"index":1818},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"../../errors","loc":{"line":36,"column":36,"index":1862},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/errors.js"},{"name":"axios","loc":{"line":37,"column":40,"index":1920},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/axios/index.js"},{"name":"../../utils","loc":{"line":38,"column":24,"index":1955},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/utils.js"},{"name":"./struct","loc":{"line":39,"column":25,"index":1996},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/struct.js"},{"name":"./contractInterface","loc":{"line":40,"column":36,"index":2045},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/contractInterface.js"},{"name":"./enum","loc":{"line":41,"column":23,"index":2092},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/enum.js"},{"name":"./typeMapper","loc":{"line":42,"column":29,"index":2132},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js"},{"name":"./endpoint","loc":{"line":43,"column":27,"index":2176},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/abiRegistry.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/endpoint.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbiRegistry = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst errors = __importStar(require(\"../../errors\"));\nconst axios_1 = __importDefault(require(\"axios\"));\nconst utils_1 = require(\"../../utils\");\nconst struct_1 = require(\"./struct\");\nconst contractInterface_1 = require(\"./contractInterface\");\nconst enum_1 = require(\"./enum\");\nconst typeMapper_1 = require(\"./typeMapper\");\nconst endpoint_1 = require(\"./endpoint\");\nclass AbiRegistry {\n    constructor() {\n        this.interfaces = [];\n        this.customTypes = [];\n    }\n    /**\n     * Convenience factory function to load ABIs (from files or URLs).\n     * This function will also remap ABI types to know types (on best-efforts basis).\n     */\n    static load(json) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let registry = new AbiRegistry();\n            for (const file of json.files || []) {\n                yield registry.extendFromFile(file);\n            }\n            for (const url of json.urls || []) {\n                yield registry.extendFromUrl(url);\n            }\n            registry = registry.remapToKnownTypes();\n            return registry;\n        });\n    }\n    /**\n     * Generally, one should use {@link AbiRegistry.load} instead.\n     */\n    extendFromFile(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let jsonContent = yield fs.promises.readFile(file, { encoding: \"utf8\" });\n            let json = JSON.parse(jsonContent);\n            return this.extend(json);\n        });\n    }\n    /**\n     * Generally, one should use {@link AbiRegistry.load} instead.\n     */\n    extendFromUrl(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield axios_1.default.get(url);\n            let json = response.data;\n            return this.extend(json);\n        });\n    }\n    extend(json) {\n        json.types = json.types || {};\n        // The \"endpoints\" collection is interpreted by \"ContractInterface\".\n        let iface = contractInterface_1.ContractInterface.fromJSON(json);\n        this.interfaces.push(iface);\n        for (const customTypeName in json.types) {\n            let itemJson = json.types[customTypeName];\n            let typeDiscriminant = itemJson.type;\n            // Workaround: set the \"name\" field, as required by \"fromJSON()\" below.\n            itemJson.name = customTypeName;\n            let customType = this.createCustomType(typeDiscriminant, itemJson);\n            this.customTypes.push(customType);\n        }\n        return this;\n    }\n    createCustomType(typeDiscriminant, json) {\n        if (typeDiscriminant == \"struct\") {\n            return struct_1.StructType.fromJSON(json);\n        }\n        if (typeDiscriminant == \"enum\") {\n            return enum_1.EnumType.fromJSON(json);\n        }\n        throw new errors.ErrTypingSystem(`Unknown type discriminant: ${typeDiscriminant}`);\n    }\n    getInterface(name) {\n        let result = this.interfaces.find((e) => e.name == name);\n        utils_1.guardValueIsSetWithMessage(`interface [${name}] not found`, result);\n        return result;\n    }\n    getInterfaces(names) {\n        return names.map((name) => this.getInterface(name));\n    }\n    getStruct(name) {\n        let result = this.customTypes.find((e) => e.getName() == name && e instanceof struct_1.StructType);\n        utils_1.guardValueIsSetWithMessage(`struct [${name}] not found`, result);\n        return result;\n    }\n    getStructs(names) {\n        return names.map((name) => this.getStruct(name));\n    }\n    getEnum(name) {\n        let result = this.customTypes.find((e) => e.getName() == name && e instanceof enum_1.EnumType);\n        utils_1.guardValueIsSetWithMessage(`enum [${name}] not found`, result);\n        return result;\n    }\n    getEnums(names) {\n        return names.map((name) => this.getEnum(name));\n    }\n    /**\n     * Right after loading ABI definitions into a registry (e.g. from a file), the endpoints and the custom types (structs, enums)\n     * use raw types for their I/O parameters (in the case of endpoints), or for their fields (in the case of structs).\n     *\n     * A raw type is merely an instance of {@link Type}, with a given name and type parameters (if it's a generic type).\n     *\n     * Though, for most (development) purposes, we'd like to operate using known, specific types (e.g. {@link List}, {@link U8Type} etc.).\n     * This function increases the specificity of the types used by parameter / field definitions within a registry (on best-efforts basis).\n     * The result is an equivalent, more explicit ABI registry.\n     */\n    remapToKnownTypes() {\n        let mapper = new typeMapper_1.TypeMapper(this.customTypes);\n        let newCustomTypes = [];\n        let newInterfaces = [];\n        // First, remap custom types (actually, under the hood, this will remap types of struct fields)\n        for (const type of this.customTypes) {\n            const mappedTyped = mapper.mapType(type);\n            newCustomTypes.push(mappedTyped);\n            mapper.feedCustomType(mappedTyped);\n        }\n        // Then, remap types of all endpoint parameters.\n        // But we'll use an enhanced mapper, that takes into account the results from the previous step.\n        mapper = new typeMapper_1.TypeMapper(newCustomTypes);\n        for (const iface of this.interfaces) {\n            let newEndpoints = [];\n            for (const endpoint of iface.endpoints) {\n                newEndpoints.push(mapEndpoint(endpoint, mapper));\n            }\n            let newConstructor = iface.constructorDefinition ? mapEndpoint(iface.constructorDefinition, mapper) : null;\n            newInterfaces.push(new contractInterface_1.ContractInterface(iface.name, newConstructor, newEndpoints));\n        }\n        // Now return the new registry, with all types remapped to known types\n        let newRegistry = new AbiRegistry();\n        newRegistry.customTypes.push(...newCustomTypes);\n        newRegistry.interfaces.push(...newInterfaces);\n        return newRegistry;\n    }\n}\nexports.AbiRegistry = AbiRegistry;\nfunction mapEndpoint(endpoint, mapper) {\n    let newInput = endpoint.input.map((e) => new endpoint_1.EndpointParameterDefinition(e.name, e.description, mapper.mapType(e.type)));\n    let newOutput = endpoint.output.map((e) => new endpoint_1.EndpointParameterDefinition(e.name, e.description, mapper.mapType(e.type)));\n    return new endpoint_1.EndpointDefinition(endpoint.name, newInput, newOutput, endpoint.modifiers);\n}\n"},"sourceMaps":{"js":{"version":3,"file":"abiRegistry.js","sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/abiRegistry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,qDAAuC;AACvC,kDAA6C;AAC7C,uCAAyD;AACzD,qCAAsC;AACtC,2DAAwD;AAExD,iCAAkC;AAClC,6CAA0C;AAC1C,yCAA6E;AAE7E,MAAa,WAAW;IAAxB;QACa,eAAU,GAAwB,EAAE,CAAC;QACrC,gBAAW,GAAiB,EAAE,CAAC;IAsH5C,CAAC;IArHG;;;OAGG;IACH,MAAM,CAAO,IAAI,CAAC,IAA2C;;YACzD,IAAI,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;YACjC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE;gBACjC,MAAM,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aACvC;YACD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE;gBAC/B,MAAM,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;aACrC;YACD,QAAQ,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;YACxC,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IACD;;OAEG;IACG,cAAc,CAAC,IAAY;;YAC7B,IAAI,WAAW,GAAW,MAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACjF,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA;IACD;;OAEG;IACG,aAAa,CAAC,GAAW;;YAC3B,IAAI,QAAQ,GAAkB,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YACzB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA;IACD,MAAM,CAAC,IAAsD;QACzD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9B,oEAAoE;QACpE,IAAI,KAAK,GAAG,qCAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,KAAK,EAAE;YACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC1C,IAAI,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC;YACrC,uEAAuE;YACvE,QAAQ,CAAC,IAAI,GAAG,cAAc,CAAC;YAC/B,IAAI,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACrC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACO,gBAAgB,CAAC,gBAAwB,EAAE,IAAS;QACxD,IAAI,gBAAgB,IAAI,QAAQ,EAAE;YAC9B,OAAO,mBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACpC;QACD,IAAI,gBAAgB,IAAI,MAAM,EAAE;YAC5B,OAAO,eAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC,8BAA8B,gBAAgB,EAAE,CAAC,CAAC;IACvF,CAAC;IACD,YAAY,CAAC,IAAY;QACrB,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QACzD,kCAA0B,CAAC,cAAc,IAAI,aAAa,EAAE,MAAM,CAAC,CAAC;QACpE,OAAO,MAAO,CAAC;IACnB,CAAC;IACD,aAAa,CAAC,KAAe;QACzB,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACxD,CAAC;IACD,SAAS,CAAC,IAAY;QAClB,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,IAAI,IAAI,CAAC,YAAY,mBAAU,CAAC,CAAC;QAC1F,kCAA0B,CAAC,WAAW,IAAI,aAAa,EAAE,MAAM,CAAC,CAAC;QACjE,OAAmB,MAAO,CAAC;IAC/B,CAAC;IACD,UAAU,CAAC,KAAe;QACtB,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,OAAO,CAAC,IAAY;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,IAAI,IAAI,CAAC,YAAY,eAAQ,CAAC,CAAC;QACxF,kCAA0B,CAAC,SAAS,IAAI,aAAa,EAAE,MAAM,CAAC,CAAC;QAC/D,OAAiB,MAAO,CAAC;IAC7B,CAAC;IACD,QAAQ,CAAC,KAAe;QACpB,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IACD;;;;;;;;;OASG;IACH,iBAAiB;QACb,IAAI,MAAM,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,cAAc,GAAiB,EAAE,CAAC;QACtC,IAAI,aAAa,GAAwB,EAAE,CAAC;QAC5C,+FAA+F;QAC/F,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YACjC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACjC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;SACtC;QACD,gDAAgD;QAChD,gGAAgG;QAChG,MAAM,GAAG,IAAI,uBAAU,CAAC,cAAc,CAAC,CAAC;QACxC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE;YACjC,IAAI,YAAY,GAAyB,EAAE,CAAC;YAC5C,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;gBACpC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;aACpD;YACD,IAAI,cAAc,GAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3G,aAAa,CAAC,IAAI,CAAC,IAAI,qCAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC,CAAC;SACvF;QACD,sEAAsE;QACtE,IAAI,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;QACpC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;QAChD,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;QAE9C,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ;AAxHD,kCAwHC;AAED,SAAS,WAAW,CAAC,QAA4B,EAAE,MAAkB;IACjE,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAC7B,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,sCAA2B,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CACxF,CAAC;IACF,IAAI,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAC/B,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,sCAA2B,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CACxF,CAAC;IACF,OAAO,IAAI,6BAAkB,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC1F,CAAC","sourcesContent":[null]}},"error":null,"hash":"794a4fff7eb2571ecc4babfb5da695d8","cacheData":{"env":{}}}