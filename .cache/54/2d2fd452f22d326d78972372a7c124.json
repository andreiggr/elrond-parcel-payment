{"id":"yqBl","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@protobufjs/pool/package.json","includedInParent":true,"mtime":1647170297145}],"generated":{"js":"\"use strict\";function r(r,n,t){var u=t||8192,e=u>>>1,l=null,c=u;return function(t){if(t<1||t>e)return r(t);c+t>u&&(l=r(u),c=0);var i=n.call(l,c,c+=t);return 7&c&&(c=1+(7|c)),i}}module.exports=r;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":1,"column":22}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":1,"column":24}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":1,"column":26}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":31,"column":0},"generated":{"line":1,"column":28}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":31}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":35}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":37}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":32,"column":0},"generated":{"line":1,"column":40}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":45}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":47}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":33,"column":0},"generated":{"line":1,"column":51}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":34,"column":0},"generated":{"line":1,"column":53}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":34,"column":0},"generated":{"line":1,"column":55}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":35,"column":0},"generated":{"line":1,"column":60}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":35,"column":0},"generated":{"line":1,"column":62}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":64}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":71}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":36,"column":0},"generated":{"line":1,"column":80}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":1,"column":83}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":1,"column":86}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":1,"column":88}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":1,"column":91}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":37,"column":0},"generated":{"line":1,"column":93}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":38,"column":0},"generated":{"line":1,"column":95}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":38,"column":0},"generated":{"line":1,"column":102}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":38,"column":0},"generated":{"line":1,"column":104}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":39,"column":0},"generated":{"line":1,"column":107}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":39,"column":0},"generated":{"line":1,"column":109}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":39,"column":0},"generated":{"line":1,"column":111}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":40,"column":0},"generated":{"line":1,"column":115}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":40,"column":0},"generated":{"line":1,"column":117}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":40,"column":0},"generated":{"line":1,"column":119}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":41,"column":0},"generated":{"line":1,"column":122}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":41,"column":0},"generated":{"line":1,"column":124}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":127}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":131}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":133}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":135}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":140}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":142}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":144}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":43,"column":0},"generated":{"line":1,"column":147}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":46,"column":0},"generated":{"line":1,"column":150}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":44,"column":0},"generated":{"line":1,"column":157}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":44,"column":0},"generated":{"line":1,"column":159}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":45,"column":0},"generated":{"line":1,"column":163}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":45,"column":0},"generated":{"line":1,"column":165}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":45,"column":0},"generated":{"line":1,"column":168}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":45,"column":0},"generated":{"line":1,"column":170}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":46,"column":0},"generated":{"line":1,"column":174}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":177}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":184}},{"source":"node_modules/@protobufjs/pool/index.js","original":{"line":2,"column":0},"generated":{"line":1,"column":192}}],"sources":{"node_modules/@protobufjs/pool/index.js":"\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"833fc517422b217deeb0368ed60819c5","cacheData":{"env":{}}}