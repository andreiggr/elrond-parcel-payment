{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/h256.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/h256.js.map","includedInParent":true,"mtime":1647170304999},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"../typesystem/h256","loc":{"line":4,"column":23,"index":134},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/h256.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/h256.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.H256BinaryCodec = void 0;\nconst h256_1 = require(\"../typesystem/h256\");\nclass H256BinaryCodec {\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read 32 bytes.\n        let slice = buffer.slice(0, 32);\n        return [new h256_1.H256Value(slice), 32];\n    }\n    /**\n     * Reads and decodes a H256Value from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeTopLevel(buffer) {\n        let [decoded, length] = this.decodeNested(buffer);\n        return decoded;\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeNested(primitive) {\n        return primitive.valueOf();\n    }\n    /**\n     * Encodes a H256Value to a buffer.\n     */\n    encodeTopLevel(primitive) {\n        return primitive.valueOf();\n    }\n}\nexports.H256BinaryCodec = H256BinaryCodec;\n"},"sourceMaps":{"js":{"version":3,"file":"h256.js","sourceRoot":"","sources":["../../../src/smartcontracts/codec/h256.ts"],"names":[],"mappings":";;;AAAA,6CAA+C;AAE/C,MAAa,eAAe;IACxB;;;;OAIG;IACH,YAAY,CAAC,MAAc;QACvB,gEAAgE;QAChE,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAChC,OAAO,CAAC,IAAI,gBAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,MAAc;QACzB,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAoB;QAC7B,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,SAAoB;QAC/B,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;CACJ;AAnCD,0CAmCC","sourcesContent":[null]}},"error":null,"hash":"54fddc1d871a58959c7cc5d4bad5b945","cacheData":{"env":{}}}