{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/types.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/types.js.map","includedInParent":true,"mtime":1647170305401},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"../../utils","loc":{"line":4,"column":24,"index":304},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/types.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NullType = exports.TypePlaceholder = exports.isTyped = exports.PrimitiveValue = exports.TypedValue = exports.CustomType = exports.PrimitiveType = exports.TypeCardinality = exports.Type = void 0;\nconst utils_1 = require(\"../../utils\");\n/**\n * An abstraction that represents a Type. Handles both generic and non-generic types.\n * Once instantiated as a Type, a generic type is \"closed\" (as opposed to \"open\").\n */\nclass Type {\n    constructor(name, typeParameters = [], cardinality = TypeCardinality.fixed(1)) {\n        utils_1.guardValueIsSet(\"name\", name);\n        this.name = name;\n        this.typeParameters = typeParameters;\n        this.cardinality = cardinality;\n    }\n    getName() {\n        return this.name;\n    }\n    getTypeParameters() {\n        return this.typeParameters;\n    }\n    isGenericType() {\n        return this.typeParameters.length > 0;\n    }\n    getFirstTypeParameter() {\n        utils_1.guardTrue(this.typeParameters.length > 0, \"type parameters length > 0\");\n        return this.typeParameters[0];\n    }\n    /**\n     * Generates type expressions similar to elrond-wasm-rs.\n     */\n    toString() {\n        let typeParameters = this.getTypeParameters().map(type => type.toString()).join(\", \");\n        let typeParametersExpression = typeParameters ? `<${typeParameters}>` : \"\";\n        return `${this.name}${typeParametersExpression}`;\n    }\n    equals(other) {\n        return Type.equals(this, other);\n    }\n    static equals(a, b) {\n        // Workaround that seems to always work properly. Most probable reasons: \n        // - ES6 is quite strict about enumerating over the properties on an object.\n        // - toJSON() returns an object literal (most probably, this results in deterministic iteration in all browser implementations).\n        let aJson = JSON.stringify(a.toJSON());\n        let bJson = JSON.stringify(b.toJSON());\n        return aJson == bJson;\n    }\n    static equalsMany(a, b) {\n        return a.every((type, i) => type.equals(b[i]));\n    }\n    static isAssignableFromMany(a, b) {\n        return a.every((type, i) => type.isAssignableFrom(b[i]));\n    }\n    differs(other) {\n        return !this.equals(other);\n    }\n    valueOf() {\n        return this.name;\n    }\n    /**\n     * Inspired from: https://docs.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom\n     * For (most) generics, type invariance is expected (assumed) - neither covariance, nor contravariance are supported yet (will be supported in a next release).\n     *\n     * One exception though: for {@link OptionType}, we simulate covariance for missing (not provided) values.\n     * For example, Option<u32> is assignable from Option<?>.\n     * For more details, see the implementation of {@link OptionType}.\n     *\n     * Also see:\n     *  - https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\n     *  - https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance\n     */\n    isAssignableFrom(type) {\n        let invariantTypeParameters = Type.equalsMany(this.getTypeParameters(), type.getTypeParameters());\n        return type instanceof this.constructor && invariantTypeParameters;\n    }\n    /**\n     * Converts the account to a pretty, plain JavaScript object.\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            typeParameters: this.typeParameters.map(item => item.toJSON())\n        };\n    }\n    getCardinality() {\n        return this.cardinality;\n    }\n}\nexports.Type = Type;\n/**\n * TODO: Simplify this class, keep only what is needed.\n *\n * An abstraction for defining and operating with the cardinality of a (composite or simple) type.\n *\n * Simple types (the ones that are directly encodable) have a fixed cardinality: [lower = 1, upper = 1].\n * Composite types (not directly encodable) do not follow this constraint. For example:\n *  - VarArgs: [lower = 0, upper = *]\n *  - OptionalResult: [lower = 0, upper = 1]\n */\nclass TypeCardinality {\n    constructor(lowerBound, upperBound) {\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n    }\n    static fixed(value) {\n        return new TypeCardinality(value, value);\n    }\n    static variable(value) {\n        return new TypeCardinality(0, value);\n    }\n    isSingular() {\n        return this.lowerBound == 1 && this.upperBound == 1;\n    }\n    isSingularOrNone() {\n        return this.lowerBound == 0 && this.upperBound == 1;\n    }\n    isComposite() {\n        return !this.isSingular();\n    }\n    isFixed() {\n        return this.lowerBound == this.upperBound;\n    }\n    getLowerBound() {\n        return this.lowerBound;\n    }\n    getUpperBound() {\n        return this.upperBound || TypeCardinality.MaxCardinality;\n    }\n}\nexports.TypeCardinality = TypeCardinality;\n/**\n * An arbitrarily chosen, reasonably large number.\n */\nTypeCardinality.MaxCardinality = 4096;\nclass PrimitiveType extends Type {\n    constructor(name) {\n        super(name);\n    }\n}\nexports.PrimitiveType = PrimitiveType;\nclass CustomType extends Type {\n}\nexports.CustomType = CustomType;\nclass TypedValue {\n    constructor(type) {\n        this.type = type;\n    }\n    getType() {\n        return this.type;\n    }\n}\nexports.TypedValue = TypedValue;\nclass PrimitiveValue extends TypedValue {\n    constructor(type) {\n        super(type);\n    }\n}\nexports.PrimitiveValue = PrimitiveValue;\nfunction isTyped(value) {\n    return value instanceof TypedValue;\n}\nexports.isTyped = isTyped;\nclass TypePlaceholder extends Type {\n    constructor() {\n        super(\"...\");\n    }\n}\nexports.TypePlaceholder = TypePlaceholder;\nclass NullType extends Type {\n    constructor() {\n        super(\"?\");\n    }\n}\nexports.NullType = NullType;\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/types.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"aac2db5254eee6310821dfea3843beea","cacheData":{"env":{}}}