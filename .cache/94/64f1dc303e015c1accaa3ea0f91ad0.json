{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/address.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/address.js.map","includedInParent":true,"mtime":1647170304880},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"../../address","loc":{"line":4,"column":26,"index":140},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/address.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/address.js"},{"name":"../typesystem","loc":{"line":5,"column":29,"index":187},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/codec/address.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressBinaryCodec = void 0;\nconst address_1 = require(\"../../address\");\nconst typesystem_1 = require(\"../typesystem\");\nclass AddressBinaryCodec {\n    /**\n     * Reads and decodes an AddressValue from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeNested(buffer) {\n        // We don't check the size of the buffer, we just read 32 bytes.\n        let slice = buffer.slice(0, 32);\n        let value = new address_1.Address(slice);\n        return [new typesystem_1.AddressValue(value), 32];\n    }\n    /**\n     * Reads and decodes an AddressValue from a given buffer.\n     *\n     * @param buffer the input buffer\n     */\n    decodeTopLevel(buffer) {\n        let [decoded, length] = this.decodeNested(buffer);\n        return decoded;\n    }\n    /**\n     * Encodes an AddressValue to a buffer.\n     */\n    encodeNested(primitive) {\n        return primitive.valueOf().pubkey();\n    }\n    /**\n     * Encodes an AddressValue to a buffer.\n     */\n    encodeTopLevel(primitive) {\n        return primitive.valueOf().pubkey();\n    }\n}\nexports.AddressBinaryCodec = AddressBinaryCodec;\n"},"sourceMaps":{"js":{"version":3,"file":"address.js","sourceRoot":"","sources":["../../../src/smartcontracts/codec/address.ts"],"names":[],"mappings":";;;AAAA,2CAAwC;AACxC,8CAA6C;AAE7C,MAAa,kBAAkB;IAC3B;;;;OAIG;IACH,YAAY,CAAC,MAAc;QACvB,gEAAgE;QAEhE,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAChC,IAAI,KAAK,GAAG,IAAI,iBAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,CAAC,IAAI,yBAAY,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,MAAc;QACzB,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAClD,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAuB;QAChC,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,SAAuB;QAClC,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;IACxC,CAAC;CACJ;AArCD,gDAqCC","sourcesContent":[null]}},"error":null,"hash":"58adc24be8a417d82b10d44a4f510d4c","cacheData":{"env":{}}}