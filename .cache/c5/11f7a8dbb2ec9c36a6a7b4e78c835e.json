{"id":"node_modules/@elrondnetwork/erdjs/out/scArgumentsParser.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/scArgumentsParser.js.map","includedInParent":true,"mtime":1647170305150},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"./errors","loc":{"line":4,"column":25,"index":138},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/scArgumentsParser.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/errors.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScArgumentsParser = void 0;\nconst errors_1 = require(\"./errors\");\n/**\n * Class with static methods useful for fetching and checking arguments from a transaction's data field that should trigger\n * a smart contract call\n */\nclass ScArgumentsParser {\n    /**\n     * Returns an array containing all the arguments from a data field representing a smart contract call\n     * @param dataField this field represents the data filed to extract arguments from\n     * @return {functionName, args} returns the function name and an array containing all the smart contract call arguments\n     * @throws ErrInvalidScCallDataField the function returns an ErrInvalidScCallDataField exception if the input isn't a smart contract call valid input\n     */\n    static parseSmartContractCallDataField(dataField) {\n        if (!this.isValidSmartContractCallDataField(dataField)) {\n            throw new errors_1.ErrInvalidScCallDataField(dataField);\n        }\n        let args = new Array();\n        let items = dataField.split(\"@\");\n        if (items.length === 0) {\n            return {\n                functionName: dataField,\n                args: new Array(),\n            };\n        }\n        for (let i = 1; i < items.length; i++) {\n            args.push(items[i]);\n        }\n        return {\n            functionName: items[0],\n            args: args,\n        };\n    }\n    /**\n     * Returns a Boolean value representing if the input data field is a valid smart contract call input\n     * @param dataField this field represents the input to check\n     */\n    static isValidSmartContractCallDataField(dataField) {\n        let items = dataField.split(\"@\");\n        if (items.length === 0) {\n            return true; // only function call, no arguments\n        }\n        for (let i = 1; i < items.length; i++) {\n            if (!this.isValidScArgument(items[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     *\n     * @param input input represents the input argument to check\n     * @return true if the provided argument resembles a valid smart contract call argument\n     */\n    static isValidScArgument(input) {\n        if (input.length % 2 != 0) {\n            return false;\n        }\n        for (let i = 0; i < input.length; i++) {\n            if (!this.validHexChars.includes(input[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.ScArgumentsParser = ScArgumentsParser;\nScArgumentsParser.validHexChars = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n"},"sourceMaps":{"js":{"version":3,"file":"scArgumentsParser.js","sourceRoot":"","sources":["../src/scArgumentsParser.ts"],"names":[],"mappings":";;;AAAA,qCAAmD;AAEnD;;;GAGG;AACH,MAAa,iBAAiB;IAI1B;;;;;OAKG;IACI,MAAM,CAAC,+BAA+B,CAAC,SAAiB;QAC3D,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,SAAS,CAAC,EAAE;YACpD,MAAM,IAAI,kCAAyB,CAAC,SAAS,CAAC,CAAC;SAClD;QAED,IAAI,IAAI,GAAG,IAAI,KAAK,EAAU,CAAC;QAC/B,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO;gBACH,YAAY,EAAE,SAAS;gBACvB,IAAI,EAAE,IAAI,KAAK,EAAU;aAC5B,CAAC;SACL;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACvB;QAED,OAAO;YACH,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;YACtB,IAAI,EAAE,IAAI;SACb,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,iCAAiC,CAAC,SAAiB;QAC7D,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC,CAAC,mCAAmC;SACnD;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnC,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,iBAAiB,CAAC,KAAa;QACzC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SAChB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxC,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;;AAtEL,8CAuEC;AArEkB,+BAAa,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC","sourcesContent":[null]}},"error":null,"hash":"a072a66b40e685ad756ac898c6214981","cacheData":{"env":{}}}