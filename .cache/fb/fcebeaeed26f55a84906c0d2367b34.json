{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/algebraic.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/algebraic.js.map","includedInParent":true,"mtime":1647170304885},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"../../utils","loc":{"line":4,"column":24,"index":156},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/algebraic.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/utils.js"},{"name":"./types","loc":{"line":5,"column":24,"index":196},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/algebraic.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/types.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionalValue = exports.OptionalType = void 0;\nconst utils_1 = require(\"../../utils\");\nconst types_1 = require(\"./types\");\n/**\n * An optional is an algebraic type. It holds zero or one values.\n */\nclass OptionalType extends types_1.Type {\n    constructor(typeParameter) {\n        super(\"Optional\", [typeParameter], types_1.TypeCardinality.variable(1));\n    }\n}\nexports.OptionalType = OptionalType;\nclass OptionalValue extends types_1.TypedValue {\n    constructor(type, value = null) {\n        super(type);\n        // TODO: assert value is of type type.getFirstTypeParameter()\n        this.value = value;\n    }\n    isSet() {\n        return this.value ? true : false;\n    }\n    getTypedValue() {\n        utils_1.guardValueIsSet(\"value\", this.value);\n        return this.value;\n    }\n    valueOf() {\n        return this.value ? this.value.valueOf() : null;\n    }\n    equals(other) {\n        var _a;\n        return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.equals(other.value)) || false;\n    }\n}\nexports.OptionalValue = OptionalValue;\n"},"sourceMaps":{"js":{"version":3,"file":"algebraic.js","sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/algebraic.ts"],"names":[],"mappings":";;;AAAA,uCAA8C;AAC9C,mCAA4D;AAE5D;;GAEG;AACH,MAAa,YAAa,SAAQ,YAAI;IAClC,YAAY,aAAmB;QAC3B,KAAK,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,EAAE,uBAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;CACJ;AAJD,oCAIC;AAED,MAAa,aAAc,SAAQ,kBAAU;IAGzC,YAAY,IAAkB,EAAE,QAA2B,IAAI;QAC3D,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,6DAA6D;QAE7D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,KAAK;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACrC,CAAC;IAED,aAAa;QACT,uBAAe,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,KAAM,CAAC;IACvB,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,KAAoB;;QACvB,OAAO,OAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,CAAC,KAAK,CAAC,KAAK,MAAK,KAAK,CAAC;IACpD,CAAC;CACJ;AA3BD,sCA2BC","sourcesContent":[null]}},"error":null,"hash":"00f481b591de8b196fbfc2aeb8729a73","cacheData":{"env":{}}}