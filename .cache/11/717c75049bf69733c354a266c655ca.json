{"id":"node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","dependencies":[{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js.map","includedInParent":true,"mtime":1647170305398},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/package.json","includedInParent":true,"mtime":1647174146392},{"name":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/package.json","includedInParent":true,"mtime":1647170304850},{"name":"../../errors","loc":{"line":23,"column":36,"index":1001},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/errors.js"},{"name":"./address","loc":{"line":24,"column":26,"index":1045},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/address.js"},{"name":"./boolean","loc":{"line":25,"column":26,"index":1085},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/boolean.js"},{"name":"./bytes","loc":{"line":26,"column":24,"index":1123},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/bytes.js"},{"name":"./composite","loc":{"line":27,"column":28,"index":1163},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/composite.js"},{"name":"./enum","loc":{"line":28,"column":23,"index":1202},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/enum.js"},{"name":"./generic","loc":{"line":29,"column":26,"index":1239},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/generic.js"},{"name":"./h256","loc":{"line":30,"column":23,"index":1276},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/h256.js"},{"name":"./numerical","loc":{"line":31,"column":28,"index":1315},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/numerical.js"},{"name":"./struct","loc":{"line":32,"column":25,"index":1356},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/struct.js"},{"name":"./tokenIdentifier","loc":{"line":33,"column":34,"index":1403},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/tokenIdentifier.js"},{"name":"./variadic","loc":{"line":34,"column":27,"index":1452},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/variadic.js"},{"name":"./algebraic","loc":{"line":35,"column":28,"index":1495},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/algebraic.js"},{"name":".","loc":{"line":36,"column":19,"index":1530},"parent":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/typeMapper.js","resolved":"/Users/mac/code/work/bitmarket/elrond-parcel/node_modules/@elrondnetwork/erdjs/out/smartcontracts/typesystem/index.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeMapper = void 0;\nconst errors = __importStar(require(\"../../errors\"));\nconst address_1 = require(\"./address\");\nconst boolean_1 = require(\"./boolean\");\nconst bytes_1 = require(\"./bytes\");\nconst composite_1 = require(\"./composite\");\nconst enum_1 = require(\"./enum\");\nconst generic_1 = require(\"./generic\");\nconst h256_1 = require(\"./h256\");\nconst numerical_1 = require(\"./numerical\");\nconst struct_1 = require(\"./struct\");\nconst tokenIdentifier_1 = require(\"./tokenIdentifier\");\nconst variadic_1 = require(\"./variadic\");\nconst algebraic_1 = require(\"./algebraic\");\nconst _1 = require(\".\");\nclass TypeMapper {\n    constructor(customTypes = []) {\n        this.openTypesConstructors = new Map([\n            [\"Option\", generic_1.OptionType],\n            [\"List\", generic_1.ListType],\n            // For the following open generics, we use a slightly different typing than the one defined by elrond-wasm-rs (temporary workaround).\n            [\"VarArgs\", variadic_1.VariadicType],\n            [\"MultiResultVec\", variadic_1.VariadicType],\n            [\"variadic\", variadic_1.VariadicType],\n            [\"OptionalArg\", algebraic_1.OptionalType],\n            [\"optional\", algebraic_1.OptionalType],\n            [\"OptionalResult\", algebraic_1.OptionalType],\n            [\"multi\", composite_1.CompositeType],\n            [\"MultiArg\", composite_1.CompositeType],\n            [\"MultiResult\", composite_1.CompositeType],\n            [\"multi\", composite_1.CompositeType],\n            // Perhaps we can adjust the ABI generator to only output \"tuple\", instead of \"tupleN\"?\n            [\"tuple\", _1.TupleType],\n            [\"tuple2\", _1.TupleType],\n            [\"tuple3\", _1.TupleType],\n            [\"tuple4\", _1.TupleType],\n            [\"tuple5\", _1.TupleType],\n            [\"tuple6\", _1.TupleType],\n            [\"tuple7\", _1.TupleType],\n            [\"tuple8\", _1.TupleType],\n        ]);\n        // For closed types, we hold actual type instances instead of type constructors (no type parameters needed).\n        this.closedTypesMap = new Map([\n            [\"u8\", new numerical_1.U8Type()],\n            [\"u16\", new numerical_1.U16Type()],\n            [\"u32\", new numerical_1.U32Type()],\n            [\"u64\", new numerical_1.U64Type()],\n            [\"U64\", new numerical_1.U64Type()],\n            [\"BigUint\", new numerical_1.BigUIntType()],\n            [\"i8\", new numerical_1.I8Type()],\n            [\"i16\", new numerical_1.I16Type()],\n            [\"i32\", new numerical_1.I32Type()],\n            [\"i64\", new numerical_1.I64Type()],\n            [\"Bigint\", new numerical_1.BigIntType()],\n            [\"BigInt\", new numerical_1.BigIntType()],\n            [\"bool\", new boolean_1.BooleanType()],\n            [\"bytes\", new bytes_1.BytesType()],\n            [\"Address\", new address_1.AddressType()],\n            [\"H256\", new h256_1.H256Type()],\n            [\"utf-8 string\", new _1.StringType()],\n            [\"TokenIdentifier\", new tokenIdentifier_1.TokenIdentifierType()],\n        ]);\n        for (const customType of customTypes) {\n            this.closedTypesMap.set(customType.getName(), customType);\n        }\n    }\n    mapType(type) {\n        let isGeneric = type.isGenericType();\n        if (type instanceof enum_1.EnumType) {\n            return type;\n        }\n        if (type instanceof struct_1.StructType) {\n            // This will call mapType() recursively, for all the struct's fields.\n            return this.mapStructType(type);\n        }\n        if (isGeneric) {\n            // This will call mapType() recursively, for all the type parameters.\n            return this.mapGenericType(type);\n        }\n        let knownClosedType = this.closedTypesMap.get(type.getName());\n        if (!knownClosedType) {\n            throw new errors.ErrTypingSystem(`Cannot map the type \"${type.getName()}\" to a known type`);\n        }\n        return knownClosedType;\n    }\n    feedCustomType(type) {\n        this.closedTypesMap.delete(type.getName());\n        this.closedTypesMap.set(type.getName(), type);\n    }\n    mapStructType(type) {\n        let mappedFields = type.fields.map((item) => new struct_1.StructFieldDefinition(item.name, item.description, this.mapType(item.type)));\n        let mappedStruct = new struct_1.StructType(type.getName(), mappedFields);\n        return mappedStruct;\n    }\n    mapGenericType(type) {\n        let typeParameters = type.getTypeParameters();\n        let mappedTypeParameters = typeParameters.map((item) => this.mapType(item));\n        let constructor = this.openTypesConstructors.get(type.getName());\n        if (!constructor) {\n            throw new errors.ErrTypingSystem(`Cannot map the generic type \"${type.getName()}\" to a known type`);\n        }\n        return new constructor(...mappedTypeParameters);\n    }\n}\nexports.TypeMapper = TypeMapper;\n"},"sourceMaps":{"js":{"version":3,"file":"typeMapper.js","sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/typeMapper.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"f072c385d9325d0297724bb4301356e2","cacheData":{"env":{}}}